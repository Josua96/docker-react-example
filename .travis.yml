language: generic
sudo: required # tell travis we need super user permissions (sudo permisions)

services: 
  - docker # tell travis that docker muts be installed before doing something


before_install: # this step will execute commands before running tests or deploying the application
 # using the tag flag (-t) to reference the created image by tag later in next steps
  - docker build -t josua96/docker-react -f Dockerfile.dev . 

 # commands to be executed to perform the desired action (running test, deploying)
 # travis will asusme that the build failed if any of the following comands finished with status code different than zero
script:
  # -e flag is used to set value to any environment variable
  #the ev CI=true tell npm run test that test should be executed only once. Jest will run in CI mode
  - docker run -e CI=true josua96/docker-react npm run test 

deploy:
 # travis comes pre-configured and it can deploy to different providers (aws beanstalk, digital ocean, etc)
  provider: elasticbeanstalk
  # the region that you used while creating the elastic beanstalk environment
  # take the region of from the url of the elastic beanstalk instance http://dockerreact-env.eba-b34ztsm7.us-east-1.elasticbeanstalk.com/
  region: "us-east-1"
  # app name is the name of your elastic beanstalk application
  app: "docker-react"
  # the environment you have created within your elastic beanstalk app  
  env: "dockerreact-env"

  # travis will take all of the files inside the github repository and it is going to create a zip all files in one
  # after that, travis will copy the zip file to a aws s3 bucket, this is the bucket name
  # The bucket is automatically created when you create the elastic beanstalk instance
  bucket_name: "elasticbeanstalk-us-east-1-869931711022"
  bucket_path: "docker-react" # same of the app name, by default
  on:
    branch: master # deploy only when changes are pushed/merged to master
  
  # References travis environment variables configured to store the access and the secret key of the travis user created in AWS
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY
